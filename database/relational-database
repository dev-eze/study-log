# 📘 관계형 데이터 모델 - 핵심 개념 정리

> 관계형 데이터베이스 강의를 들으며 정리한 노트입니다.  
> 용어 정리와 네이밍 규칙, 키의 개념까지 정리하면서  
> 실무에서 스키마를 설계할 때 어떤 기준으로 테이블과 컬럼을 구성해야 하는지 다시 한번 점검할 수 있었습니다.

---

### 📝 **강의 내용 요약**

---

## ✅ 주요 개념

- ✅ 관계형 데이터베이스  
    - 관계형 데이터 모델에 기반하여 구조화된 데이터베이스  
    - 여러 개의 릴레이션으로 구성된다.

- ✅ 관계형 데이터 모델  
    - set은 도메인이라고 하며, 엘리먼트 또는 밸류라 불리는 **원자값들의 집합**이다.  
        - 예) `set Order`  
    - 릴레이션 모델은 튜플을 가진다.

    - ✅ 구성 요소
        - **도메인**: set of atomic values → 컬럼은 원자값으로 구성  
        - **도메인 이름**  
        - **어트리뷰트(Attribute)**: 릴레이션 내에서 도메인이 맡은 역할 → 컬럼  
        - **튜플(Tuple)**: 각 어트리뷰트의 값으로 이루어진 리스트, 일부 값은 Nullable 가능  
        - **릴레이션(Relation)**: set of tuples → 테이블  
        - **릴레이션 이름** → 테이블명

    - ✅ 스키마(Schema)
        - 관계 이름과 속성의 리스트로 구성  
        - 예: `ORDER_ITEM(id, name, price)`
        - 제약 조건도 포함될 수 있음

    - ✅ Degree of 릴레이션  
        - 릴레이션 스키마에서 어트리뷰트(컬럼)의 수  
        - 예: `ORDER_ITEM(id, name, price)` → 차수 3

---

## ✅ 관계형 데이터 네이밍 규칙

- 테이블, 컬럼, 인덱스, 제약 조건 등은 **일관성, 가독성, 유지보수성**을 고려하여 명명

### ✅ 기본 규칙

| 항목        | 규칙 예시                     |
|-------------|-------------------------------|
| 테이블명    | 복수형 명사 (`users`, `orders`) |
| 컬럼명      | 소문자 + 언더스코어 (`user_id`) |
| 인덱스명    | `idx_테이블명_컬럼명` (`idx_users_email`) |
| 외래키명    | `fk_테이블명_참조테이블명` (`fk_orders_users`) |
| 제약조건명  | `ck_테이블명_컬럼명_조건` (`ck_users_email_unique`) |
| 기본키명    | `pk_테이블명` (`pk_users`)     |

### ✏️ 추가 고려사항

- 가독성: 누구나 보고 바로 이해할 수 있는 명명  
- 일관성: 프로젝트 전체에 동일한 룰 적용  
- 유지보수성: 변경 및 확장이 쉬운 구조  
- DBMS 특이점: MySQL, PostgreSQL, Oracle 등에서 권장하는 룰 참고  
- 약어 최소화: 사용 시 약어 사전 공유

---

## ✅ 릴레이션의 특징

- ✅ 중복된 튜플을 가질 수 없다. (set of tuples)
- ✅ 튜플을 식별하기 위해 **어트리뷰트의 부분집합을 키로 설정**한다.
- ✅ 튜플의 순서는 **오더링 기준에 따라 다르다.**
- ✅ 어트리뷰트의 순서는 **중요하지 않다.**
- ✅ 어트리뷰트는 **원자값을 가져야 한다.**
    - ❌ 멀티 밸류, 컴포지트 어트리뷰트는 허용되지 않음

---

## ✅ 키의 종류

### 🔹 슈퍼키 (Super Key)

- ✅ 테이블에서 튜플을 유니크하게 식별할 수 있는 **컬럼 집합**

### 🔹 후보키 (Candidate Key)

- ✅ **최소성**을 만족하는 슈퍼키  
- ✅ 컬럼을 하나라도 제거하면 유일성 상실

### 🔹 프라이머리 키 (Primary Key)

- ✅ 여러 후보키 중 **대표로 선택된 키**  
- ✅ Null을 허용하지 않으며 반드시 유일해야 함

### 🔹 유니크 키 (Unique Key)

- ✅ 프라이머리 키가 아닌 나머지 후보키  
- ✅ **Alternate Key**라고도 불림

---

## ✅ Foreign Key (외래 키)

- ✅ 다른 테이블의 프라이머리 키를 참조하는 키  
- 예: `orders` 테이블에 있는 `order_item_id`가 `order_items` 테이블의 `id`를 참조하는 경우 → `order_item_id`가 FK


---

## ✍️ 회고

> 단순히 테이블을 만든다고 해서 관계형 DB를 잘 설계했다고 말할 수는 없다.  
> **릴레이션 모델의 정의와 제약 사항, 네이밍 규칙, 키의 설계 원칙**까지 명확히 이해해야 한다.
> 실무에서 ERD를 그릴 때에도 이런 용어를 정확히 사용하진 못하더라도, 개념에 기반해서 설명할 수 있어야 한다.
